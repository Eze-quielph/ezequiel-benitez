---
import { useTranslations, getLangFromUrl } from "../i18n/utils";
import LangToggle from "./LangToggle.astro";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-white justify-center items-center"
  >
    <a
      href="/#experience"
      class="relative block px-2 py-2 transition hover:text-sky-500 duration-300 ease-in-out transform hover:scale-110"
    >
      {t("header.experience")}
    </a>
    <a
      href="/#project"
      class="relative block px-2 py-2 transition hover:text-sky-500 duration-300 ease-in-out transform hover:scale-110"
    >
      {t("header.project")}
    </a>
    <a
      href="/#about"
      class="relative block px-2 py-2 transition hover:text-sky-500 duration-300 ease-in-out transform hover:scale-110"
    >
      {t("header.about")}
    </a>
    <a
      href="/#contact"
      class="relative block px-2 py-2 transition hover:text-sky-500 duration-300 ease-in-out transform hover:scale-110"
    >
      {t("header.contact")}
    </a>
    <div class=" align-middle flex item-center justify-center mb-3 mr-2">
      <LangToggle class="h-6 w-6" />
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500")
            } else {
              item.classList.remove("text-yellow-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur bg-gray-300/60 dark:bg-gray-800/60 ring-white/10;
    }
  }
</style>